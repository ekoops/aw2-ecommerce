version: "3.9"
services:
  catalog-svc:
    image: aw2-ecommerce/catalog-svc
    container_name: catalog-svc
    build:
      dockerfile: ../../Dockerfile # relative to the build context
      context: ./catalog-service/build/libs
    env_file:
      - configs/catalog-svc.env.prod
    ports:
      - "8080:8080"
    networks:
      - catalog-net
      - communication-net
    depends_on:
      - catalog-db
      - kafka
#      - warehouse-svc
      - wallet-svc
      - discovery-svc
  #    - mail-svc
  #      - order-svc
  #    logging:
  #      driver: none

  catalog-db:
    image: mariadb
    container_name: catalog-db
#    restart: always
    env_file:
      - configs/catalog-db.env.prod
    #    ports:
    #      - "3306:3306"
#    volumes:
#      - ./volumes/catalog-db:/var/lib/mysql
    networks:
      - catalog-net
#    logging:
#      driver: none

  wallet-svc:
    image: aw2-ecommerce/wallet-svc
    container_name: wallet-svc
    build:
      dockerfile: ../../Dockerfile # relative to the build context
      context: ./wallet-service/build/libs
    env_file:
      - configs/wallet-svc.env.prod
#    ports:
#      - "4000:4000"
    networks:
      - wallet-net
      - communication-net
    depends_on:
      - wallet-db
      - kafka
      - discovery-svc
  #    logging:
  #      driver: none

  wallet-db:
    image: mariadb
    container_name: wallet-db
    restart: always
    env_file:
      - configs/wallet-db.env.prod
    #    ports:
    #      - "3306:3306"
#    volumes:
#      - ./volumes/wallet-db:/var/lib/mysql
    networks:
      - wallet-net
    logging:
      driver: none

  warehouse-svc:
    image: aw2-ecommerce/warehouse-svc
    container_name: warehouse-svc
    build:
      dockerfile: ../Dockerfile # relative to the build context
      context: ./warehouse-service/build
    #    restart: always
    env_file:
      - configs/warehouse-svc.env.prod
    networks:
      - warehouse-net
      - communication-net
    depends_on:
      - warehouse-db
      - kafka

  warehouse-db:
    image: mongo
    container_name: warehouse-db
    #    restart: always
    env_file:
      - configs/warehouse-db.env.prod
    #    ports:
    #      - "27017:27017"
    #    volumes:
    #      - ./volumes/warehouse-db:/data/db
    networks:
      - warehouse-net
      - kafka-net
    logging:
      driver: none

  order-svc:
    image: aw2-ecommerce/order-svc
    container_name: order-svc
    build:
      dockerfile: ../Dockerfile # relative to the build context
      context: ./order-service/build
    #    restart: always
    env_file:
      - configs/order-svc.env.prod
    ports:
      - "3000:3000"
    networks:
      - order-net
      - communication-net
    depends_on:
      - order-db
      - kafka
  #      - discovery-svc

  # order-svc-cleaner:
  #   image: aw2-ecommerce/order-svc-cleaner
  #   container_name: order-svc-cleaner
  #   build:
  #     dockerfile: ../Dockerfile # relative to the build context
  #     context: ./order-service-cleaner/build
  #   #    restart: always
  #   env_file:
  #     - configs/order-svc-cleaner.env.prod
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - order-net
  #   depends_on:
  #     - order-db

  order-db:
    image: mongo
    container_name: order-db
    #    restart: always
    env_file:
      - configs/order-db.env.prod
    #    ports:
    #      - "27017:27017"
    #    volumes:
    #      - ./volumes/order-db:/data/db
    networks:
      - order-net
      - kafka-net
    logging:
      driver: none

  mail-svc:
    image: aw2-ecommerce/mail-svc
    container_name: mail-svc
    build:
      dockerfile: ../Dockerfile # relative to the build context
      context: ./mail-service/build
    restart: always
    env_file:
      - configs/mail-svc.env.prod
    ports:
      - "8083:8083"
    networks:
      - communication-net
    depends_on:
      - kafka
#      - discovery-svc

  zookeeper:
    image: zookeeper
    container_name: zookeeper
    #    ports:
    #      - "2181:2181"
    volumes:
      - ./volumes/zookeeper/data:/data
      - ./volumes/zookeeper/datalog:/datalog
      - ./volumes/zookeeper/logs:/logs
    networks:
      - kafka-net
    logging:
      driver: none

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    #    ports:
    #      - "9092:9092"
    env_file:
      - configs/kafka.env.prod
    volumes:
      #      - ./volumes/kafka/secrets:/etc/kafka/secrets # not needed
      - ./volumes/kafka/data:/var/lib/kafka/data
    networks:
      - kafka-net
      - communication-net
    depends_on:
      - zookeeper
  #    logging:
  #      driver: none

  # kafka-connect:
  #   image: debezium/connect
  #   container_name: kafka-connect
  #   ports:
  #     - "8083:8083"
  #   env_file:
  #     - configs/kafka-connect.env.prod
  #   volumes:
  #     - ./volumes/kafka-connect/config:/kafka/config
  #     - ./volumes/kafka-connect/data:/kafka/data
  #     - ./volumes/kafka-connect/logs:/kafka/logs
  #   networks:
  #     - kafka-net
  #   depends_on:
  #     - kafka
  #     - zookeeper

  discovery-svc:
    image: aw2-ecommerce/discovery-svc
    container_name: discovery-svc
    build:
      dockerfile: ../../Dockerfile # relative to the build context
      context: ./discovery-service/build/libs
    ports:
      - "8761:8761"
    networks:
      - communication-net
#    logging:
#      driver: none

networks:
  catalog-net:
    name: catalog-net
  wallet-net:
    name: wallet-net
  warehouse-net:
    name: warehouse-net
  order-net:
    name: order-net
  kafka-net:
    name: kafka-net
  communication-net:
    name: communication-net